[KakaoTalk_20250311_165921149.mp4](attachment:781c6fe8-e92c-496d-a5fc-8752da353ba0:KakaoTalk_20250311_165921149.mp4)

![image.png](attachment:af1bb249-ba7f-4858-9fc6-6688fe7f61cc:image.png)

![image.png](attachment:ebe0d658-faf6-4fa2-99b2-1892951277db:image.png)

![image.png](attachment:ebfb1611-f52a-405f-9df3-328f5cfa3a37:image.png)

# 코드 분석

### 1. **상수 및 전역 변수 선언**

```cpp
#define SONAR_COUNT 4  // 초음파 센서 개수
const uint8_t TRIGGER_PINS[SONAR_COUNT] = {14, 16, 18, 20};
const uint8_t ECHO_PINS[SONAR_COUNT] = {15, 17, 19, 21};
const char* SENSOR_NAMES[SONAR_COUNT] = {"전방", "후방", "좌측", "우측"};
#define MAX_DISTANCE 400  // 최대 측정 거리 (cm)
#define MIN_PING_INTERVAL 30  // 각 센서 간의 최소 간격(ms) - 증가시켜 안정성 향상

// 전역 변수 선언
SemaphoreHandle_t sonarDataMutex;
QueueHandle_t serialOutputQueue;
#define SERIAL_QUEUE_LENGTH 10
#define SERIAL_ITEM_SIZE 128

volatile uint16_t sonarDistances[SONAR_COUNT] = {0};
volatile unsigned long lastMeasurementTime[SONAR_COUNT] = {0};

// NewPing 객체 배열
NewPing sonars[SONAR_COUNT] = {
  NewPing(TRIGGER_PINS[0], ECHO_PINS[0], MAX_DISTANCE),
  NewPing(TRIGGER_PINS[1], ECHO_PINS[1], MAX_DISTANCE),
  NewPing(TRIGGER_PINS[2], ECHO_PINS[2], MAX_DISTANCE),
  NewPing(TRIGGER_PINS[3], ECHO_PINS[3], MAX_DISTANCE)
};

```

- `TRIGGER_PINS`, `ECHO_PINS`, `SENSOR_NAMES`: 각 초음파 센서의 핀 번호와 센서 이름을 정의.
- `MAX_DISTANCE`: 센서가 측정할 수 있는 최대 거리.
- `MIN_PING_INTERVAL`: 각 센서가 측정하는 간격.
- `sonarDataMutex`: 세마포어로 센서 데이터 보호.
- `serialOutputQueue`: 시리얼로 출력할 데이터를 위한 큐.
- `sonarDistances`: 각 센서의 거리 값을 저장.
- `sonars`: `NewPing` 객체 배열로, 각 초음파 센서 인스턴스를 생성.

### 2. **태스크 핸들 선언**

```cpp
TaskHandle_t sonarTaskHandle;
TaskHandle_t processingTaskHandle;
TaskHandle_t serialOutputTaskHandle;

```

- `sonarTaskHandle`, `processingTaskHandle`, `serialOutputTaskHandle`: 각 태스크의 핸들. 태스크를 관리하고 종료시킬 때 사용.

### 3. **초음파 센서 태스크**

```cpp
void vSonarTask(void *pvParameters) 
{
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();

  for (;;) 
  {
    for (uint8_t i = 0; i < SONAR_COUNT; i++) 
    {
      unsigned long currentTime = millis();
      uint16_t distance = sonars[i].ping_cm();

      // 세마포어 획득
      if (xSemaphoreTake(sonarDataMutex, pdMS_TO_TICKS(10)) == pdTRUE) 
      {
        sonarDistances[i] = distance;
        lastMeasurementTime[i] = currentTime;
        xSemaphoreGive(sonarDataMutex);
      }
      // 절대 시간 지연 대신 상대적 지연 사용
      vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(MIN_PING_INTERVAL));
    }
  }
}

```

- `vSonarTask`: 초음파 센서를 측정하는 태스크.
    - 각 센서에 대해 `ping_cm()` 메서드를 호출하여 거리 값을 측정.
    - `xSemaphoreTake()`로 세마포어를 얻은 후, 측정된 값을 `sonarDistances` 배열에 저장.
    - `vTaskDelayUntil()`을 사용하여 각 센서의 측정 간격을 설정.

### 4. **데이터 처리 태스크**

```cpp
void vProcessingTask(void *pvParameters) 
{
  const TickType_t xDelay = pdMS_TO_TICKS(100);
  uint16_t localDistances[SONAR_COUNT];
  TickType_t xLastWakeTime;
  xLastWakeTime = xTaskGetTickCount();

  for (;;) 
  {
    bool dataUpdated = false;

    // 세마포어 획득 시간 제한 설정
    if (xSemaphoreTake(sonarDataMutex, pdMS_TO_TICKS(10)) == pdTRUE) 
    {
      memcpy(localDistances, (const void*)sonarDistances, sizeof(localDistances));
      xSemaphoreGive(sonarDataMutex);
      dataUpdated = true;
    }

    if (dataUpdated) 
    {
      for (int i = 0; i < SONAR_COUNT; i++) 
      {
        if (localDistances[i] > 0 && localDistances[i] < MAX_DISTANCE) 
        {  // 유효 범위 검사 추가
          char buffer[SERIAL_ITEM_SIZE];
          snprintf(buffer, SERIAL_ITEM_SIZE, "%s 센서: %d cm", SENSOR_NAMES[i], localDistances[i]);

          // 큐 전송 시간 제한 설정
          if (xQueueSend(serialOutputQueue, buffer, pdMS_TO_TICKS(10)) != pdPASS) 
          {
            // 큐가 가득 찬 경우 처리
          }
        }
      }

      char divider[SERIAL_ITEM_SIZE] = "------------------------";
      xQueueSend(serialOutputQueue, divider, pdMS_TO_TICKS(10));
    }

    // 절대 시간 지연 대신 상대적 지연 사용
    vTaskDelayUntil(&xLastWakeTime, xDelay);
  }
}

```

- `vProcessingTask`: 센서 데이터를 처리하여 시리얼 큐에 전송하는 태스크.
    - `xSemaphoreTake()`로 세마포어를 얻어 센서 데이터를 `localDistances`에 복사.
    - 유효한 데이터가 있으면, `snprintf()`로 출력할 문자열을 만든 후 큐에 전송.
    - 데이터 전송 후 "------------------------"로 구분선 추가.

### 5. **시리얼 출력 태스크**

```cpp
void vSerialOutputTask(void *pvParameters) 
{
  char buffer[SERIAL_ITEM_SIZE];

  for (;;) 
  {
    if (xQueueReceive(serialOutputQueue, buffer, pdMS_TO_TICKS(100)) == pdTRUE) 
    {
      Serial.println(buffer);
    }
    taskYIELD();  // 다른 태스크에 CPU 양보
  }
}

```

- `vSerialOutputTask`: 큐에서 데이터를 받아 시리얼 모니터에 출력하는 태스크.
    - `xQueueReceive()`로 큐에서 데이터를 읽고, 시리얼로 출력.

### 6. **`setup()` 함수**

```cpp
void setup() 
{
  Serial.begin(115200);
  while (!Serial) 
  {
    ; // 시리얼 포트가 연결될 때까지 대기
  }

  Serial.println(F("초음파 센서 시스템 - FreeRTOS"));
  Serial.println(F("전방/후방/좌측/우측 센서 모니터링"));
  Serial.println();

  // 세마포어와 큐 생성
  sonarDataMutex = xSemaphoreCreateMutex();
  if (sonarDataMutex == NULL) 
  {
    Serial.println(F("세마포어 생성 실패"));
    while(1);  // 오류 시 정지
  }

  serialOutputQueue = xQueueCreate(SERIAL_QUEUE_LENGTH, SERIAL_ITEM_SIZE);
  if (serialOutputQueue == NULL) 
  {
    Serial.println(F("큐 생성 실패"));
    while(1);  // 오류 시 정지
  }

  // 태스크 생성 - 스택 크기 증가
  xTaskCreate(vSonarTask, "SonarTask", 256, NULL, 3, &sonarTaskHandle);
  xTaskCreate(vProcessingTask, "ProcessingTask", 256, NULL, 2, &processingTaskHandle);
  xTaskCreate(vSerialOutputTask, "SerialOutputTask", 256, NULL, 1, &serialOutputTaskHandle);

  // 스케줄러 시작
  vTaskStartScheduler();
}

```

- **시리얼 초기화**: `Serial.begin(115200)`로 시리얼 통신 시작.
- **세마포어 및 큐 생성**: `xSemaphoreCreateMutex()`와 `xQueueCreate()`로 세마포어와 큐를 생성.
- **태스크 생성**: `xTaskCreate()`로 초음파 센서 태스크, 데이터 처리 태스크, 시리얼 출력 태스크를 생성.
- **스케줄러 시작**: `vTaskStartScheduler()`로 FreeRTOS 스케줄러 시작.

### 7. **`loop()` 함수**

```cpp
void loop() 
{
  // FreeRTOS를 사용하면 loop()는 실행되지 않음
}

```

- `loop()` 함수는 FreeRTOS에서는 실행되지 않으며, `setup()`에서 스케줄러가 시작된 후, 여러 태스크들이 실행.
